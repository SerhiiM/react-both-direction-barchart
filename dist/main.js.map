{"mappings":"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","sources":["src/Chart/index.js","src/Chart/Chart.js","src/Chart/styles.js"],"sourcesContent":["export { default } from \"./Chart\";\n","import React from \"react\";\n\nimport {\n  BarBlock,\n  BasisLine,\n  DiffDirectionHeightBlock,\n  FullHeightBlock\n} from \"./styles\";\n\n/*\n  @namespace {Array[{value: number, primaryColor: string, secondaryColor: string}]} data\n  @namespace {number} barchartHeight  \n  @namespace {number} barWidth  \n  @namespace {number} spaceBetweenWidth  \n*/\nconst Chart = ({ data = [], barchartHeight = 200, barWidth = 50, spaceBetweenWidth = 10 }) => {\n  const isAllPositive = data.every(item => item.value >= 0);\n  const isAllNegative = data.every(item => item.value <= 0);\n  const isDiffDirection = !isAllPositive && !isAllNegative;\n\n  let maxValue = 0;\n  let isPositiveBarLonger = false;\n  let biggestDiffValue = 0;\n\n  data.forEach(item => {\n    if (maxValue < Math.abs(item.value)) {\n      maxValue = Number(Math.abs(item.value.toFixed(2)));\n      isPositiveBarLonger = 0 < item.value;\n    }\n  });\n\n  if (isDiffDirection) {\n    data.forEach(item => {\n      if (\n        (isPositiveBarLonger ? item.value < 0 : item.value > 0) &&\n        biggestDiffValue < Math.abs(item.value)\n      ) {\n        biggestDiffValue = Number(Math.abs(item.value.toFixed(2)));\n      }\n    });\n  };\n\n  return (\n    <div>\n      {isAllPositive && (\n        <div>\n          <FullHeightBlock isPositive height={barchartHeight}>\n            {data.map(item => {\n              return (\n                <BarBlock\n                  key={item.key}\n                  height={Math.round((item.value / maxValue) * 100)}\n                  primaryColor={item.primaryColor}\n                  secondaryColor={item.secondaryColor}\n                  isPositive\n                />\n              );\n            })}\n          </FullHeightBlock>\n          <BasisLine />\n        </div>\n      )}\n      {isAllNegative && (\n        <div>\n          <BasisLine />\n          <FullHeightBlock height={barchartHeight}>\n            {data.map(item => {\n              return (\n                <BarBlock\n                  key={item.key}\n                  height={Math.abs(Math.round((item.value / maxValue) * 100))}\n                  primaryColor={item.primaryColor}\n                  secondaryColor={item.secondaryColor}\n                  isPositive={false}\n                />\n              );\n            })}\n          </FullHeightBlock>\n        </div>\n      )}\n      {isDiffDirection && (\n        <DiffDirectionHeightBlock height={barchartHeight}>\n          <FullHeightBlock isPositive isDiffDirection>\n            {data.map(item => {\n              return (\n                <BarBlock\n                  key={item.key}\n                  height={\n                    item.value > 0\n                      ? (item.value / (maxValue + biggestDiffValue)) *\n                      barchartHeight\n                      : 0\n                  }\n                  isStrictSize\n                  primaryColor={item.value > 0 ? item.primaryColor : \"transparent\"}\n                  secondaryColor={\n                    item.value > 0 ? item.secondaryColor : \"transparent\"\n                  }\n                  isPositive\n                />\n              );\n            })}\n          </FullHeightBlock>\n          <BasisLine />\n          <FullHeightBlock isDiffDirection>\n            {data.map(item => {\n              return (\n                <BarBlock\n                  key={item.key}\n                  height={\n                    item.value < 0\n                      ? Math.abs(\n                        (item.value / (maxValue + biggestDiffValue)) *\n                        barchartHeight\n                      )\n                      : 0\n                  }\n                  isStrictSize\n                  primaryColor={item.value < 0 ? item.primaryColor : \"transparent\"}\n                  secondaryColor={\n                    item.value < 0 ? item.secondaryColor : \"transparent\"\n                  }\n                  isPositive={false}\n                />\n              );\n            })}\n          </FullHeightBlock>\n        </DiffDirectionHeightBlock>\n      )}\n    </div>\n  );\n};\n\nexport default Chart;\n","export const BarBlock = styled.div`\n  background: ${({ primaryColor }) => primaryColor};\n  border: solid 1px ${({ secondaryColor }) => secondaryColor};\n  height: ${({ height, isStrictSize }) =>\n    `${height}${isStrictSize ? \"px\" : \"%\"}`};\n  width: 24px;\n  margin: 0 5px;\n  border-radius: ${({ isPositive }) =>\n    isPositive ? \"4px 4px 0 0\" : \"0 0 4px 4px\"};\n  &:first-child {\n    margin-left: 0px;\n  }\n  &:last-child {\n    margin-right: 0px;\n  }\n`;\n\nexport const FullHeightBlock = styled.div`\n  height: ${({ isDiffDirection, height }) =>\n    isDiffDirection ? \"max-content\" : height + \"px\"};\n  display: flex;\n  align-items: ${({ isPositive }) => (isPositive ? \"flex-end\" : \"flex-start\")};\n`;\n\nexport const BasisLine = styled.div`\n  background: #607EAA;\n  width: 100%;\n  height: 1px;\n`;\n\nexport const DiffDirectionHeightBlock = styled.div`\n  height: max-content;\n`;\n"],"names":[],"version":3,"file":"main.js.map"}